var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Tangle","category":"page"},{"location":"#Tangle","page":"Home","title":"Tangle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tangle is an attempt at software for describing, modeling and working with knots.","category":"page"},{"location":"#Representation","page":"Home","title":"Representation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic data structure is a Loop.  Among other things, a Loop is a function that maps a KnotParameter to a point in three dimensional space.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A KnotParameter is a floating poingt number ranging from 0.0 (MIN_KnotParameter) to 1.0 (MAX_KnotParameter).  Arithmetic on KnotParameters is performed modulo 1.0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A loop is defined by a sequence of \":points of interest\".  Each PointOfIntrerest assiciates a KnotParameter with a point in space.","category":"page"},{"location":"","page":"Home","title":"Home","text":"KnotParameter\nTangle.divide_interval\nPointOfInterest\nPointsOfInterest\nLoop\nfind_poi\nnext\nprevious\nbefore\nafter","category":"page"},{"location":"#Tangle.KnotParameter","page":"Home","title":"Tangle.KnotParameter","text":"KnotParameter is a floating point number modulo 1.\n\n\n\n\n\n","category":"type"},{"location":"#Tangle.divide_interval","page":"Home","title":"Tangle.divide_interval","text":"divide_interval(from::KnotParameter, to::KnotParameter, count::Integer\n\nReturn count KnotParameters evenly spaced between from and to.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.PointOfInterest","page":"Home","title":"Tangle.PointOfInterest","text":"PointOfInterest\n\nPointOfInterest represents a point on a Loop for which a location has been specified.\n\nNo two points of interest should have the same KnotParameter widthin a Loop.\n\nNo two points of interest should have equal coordinates within the same mathematical link.\n\nCurrently, no code enforces these rules.\n\n\n\n\n\n","category":"type"},{"location":"#Tangle.PointsOfInterest","page":"Home","title":"Tangle.PointsOfInterest","text":"PointsOfInterest is a sequence whose elements are PointsOfInterest objects.\n\n\n\n\n\n","category":"type"},{"location":"#Tangle.Loop","page":"Home","title":"Tangle.Loop","text":"Loop\n\nA Loop represents a mathematical knot.\n\nIn one sense, it is a function in some parameter p (a KnotParameter) that returns a point in R3 for p.\n\nloop(0.0) == loop(1.0)\n\nwhere loop is a Loop.\n\nAs a means of defining and representing knots, a Loop has a sorted set of \"points of interest\".  Each point of interest is just a specific value for the parameter t.\n\n\n\n\n\n","category":"type"},{"location":"#Tangle.find_poi","page":"Home","title":"Tangle.find_poi","text":"find_poi(predicate, ::Loop)\n\nReturn the PointOfInterest from the Loop which satisfies predicate.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.next","page":"Home","title":"Tangle.next","text":"next(loop::Loop, kp::KnotParameter)\n\nIf kp is the KnotParameter of some PointOfInterest in loop then return the next PointOfInterest in that loop.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.previous","page":"Home","title":"Tangle.previous","text":"previous(loop::Loop, kp::KnotParameter)\n\nIf kp is the KnotParameter of some PointOfInterest in loop then return the next PointOfInterest in that loop.  Otherwise, return nothing.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.before","page":"Home","title":"Tangle.before","text":"before(loop::Loop, label)\nbefore(loop::Loop, poi::PointOfInterest)::KnotParameter\n\nReturn a KnotParameter that comes before the specified PointOfInterest but after any previous points of interest.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.after","page":"Home","title":"Tangle.after","text":"after(loop::Loop, label)\nafter(loop::Loop, poi::PointOfInterest)::KnotParameter\n\nReturn a KnotParameter that comes after the specified PointOfInterest but before any succeeding points of interest.\n\n\n\n\n\n","category":"function"},{"location":"#Operations","page":"Home","title":"Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"grab\nwas\nreidemeisterTwist","category":"page"},{"location":"#Tangle.grab","page":"Home","title":"Tangle.grab","text":"grab(::Loop, ::KnotParameter, label, delta)\n\nReturn a new Loop with a point of interest added at the specified KnotParameter with the specified symbol.\n\nThe new point of interest will be displaced by delta \"outward\".\n\nlabel provides a way to label or explain the reason for grabbing.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.was","page":"Home","title":"Tangle.was","text":"was(::Grab)\n\nReturn the PointOfInterest that this operation grabbed from.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.reidemeisterTwist","page":"Home","title":"Tangle.reidemeisterTwist","text":"reidemeisterTwist(loop::Loop, handle::PointOfInterest, twist::Twist)\n\nReturn a new loop by applying the Reidermeister I (twist) operation to loop at handle.\n\ntwist determines the direstion of twist.\n\nhandle should be the result of a grab operation.\n\nThe diameter of the loop is based on the delta of handle's Grab operation.\n\n\n\n\n\n","category":"function"},{"location":"#Geometry","page":"Home","title":"Geometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"center\nTangle.Line\nTangle.direction_vector\nTangle.unit_direction_vector\nTangle.parallel\nTangle.point_on_line\nTangle.point_in_segment\nTangle.proximal_points","category":"page"},{"location":"#Tangle.center","page":"Home","title":"Tangle.center","text":"center(points)\n\nReturn the point at the center of the collection of points.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.Line","page":"Home","title":"Tangle.Line","text":"A Line is represented by two points on it. For a line segment, these points are the end points.\n\n\n\n\n\n","category":"type"},{"location":"#Tangle.direction_vector","page":"Home","title":"Tangle.direction_vector","text":"direction_vector(::Line)\n\nReturn a direction vector for the Line.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.unit_direction_vector","page":"Home","title":"Tangle.unit_direction_vector","text":"unit_direction_vector(::Line)\n\nReturn the unit direction vector for the Line.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.parallel","page":"Home","title":"Tangle.parallel","text":"parallel(line1::Line, line2::Line)::Bool\n\nReturn true if the two lines are parallel.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.point_on_line","page":"Home","title":"Tangle.point_on_line","text":"point_on_line(point, line::Line)::Bool\n\nReturn true if line intersects point.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.point_in_segment","page":"Home","title":"Tangle.point_in_segment","text":"point_in_segment(point, segment::Line)\n\nIf point is on the specified Line and lies within the defining points of that Line then return the parameter p such that line(p) == point, otherwise return nothing.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.proximal_points","page":"Home","title":"Tangle.proximal_points","text":"proximal_points(line1::Line, line2::Line)\n\nReturn the two points (as 3 element Vectors) which are the point on line1 closest to line2 and the point on line2 closest to line1 respectively.\n\n\n\n\n\n","category":"function"},{"location":"#Symbolics.jl","page":"Home","title":"Symbolics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Portions of Tangle use Symbolics.jl.  Some utilities have been defined to make it easier to use vectors in Symbolics.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tangle.symbolic_vector\nTangle.vsubs","category":"page"},{"location":"#Tangle.symbolic_vector","page":"Home","title":"Tangle.symbolic_vector","text":"symbolic_vector(name::Symbol, n::Integer)\n\nDefine n Symbolics variables whose names are based on name and return a vector of those variables.\n\n\n\n\n\n","category":"function"},{"location":"#Tangle.vsubs","page":"Home","title":"Tangle.vsubs","text":"vsubs(v::Vector{Symbolics.Num}, values...)\n\nReturn a list of Pairs suitable for constructing a Dict which is suitable for passing to Symbolics.substitute, which substitues each of values with the corresponding variable in v.\n\n\n\n\n\n","category":"function"}]
}
